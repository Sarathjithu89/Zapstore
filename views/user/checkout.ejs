<%- include('../partials/header.ejs') %>

<link
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
  rel="stylesheet"
/>
<style>
  body {
    background-color: #f8f9fa;
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    color: #333;
  }

  .checkout-container {
    padding: 30px 0;
  }

  .section-card {
    background-color: white;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    padding: 25px;
    margin-bottom: 25px;
    transition: all 0.3s ease;
  }

  .section-title {
    font-size: 1.4rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 2px solid #f0f0f0;
    display: block;
  }

  .section-title i {
    color: #ffc107;
    margin-right: 8px;
  }

  .address-select {
    height: 50px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background-color: #f9f9f9;
    transition: all 0.3s ease;
    padding: 10px 15px;
  }

  .address-select:focus {
    border-color: #ffc107;
    box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.15);
  }

  .action-btn {
    border-radius: 8px;
    padding: 10px 20px;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .primary-btn {
    background-color: #ffc107;
    color: #333;
    border: none;
  }

  .primary-btn:hover {
    background-color: #e0a800;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(224, 168, 0, 0.2);
  }

  .secondary-btn {
    background-color: #007bff;
    color: white;
    border: none;
  }

  .secondary-btn:hover {
    background-color: #0069d9;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 105, 217, 0.2);
  }

  .product-item {
    display: flex;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #f0f0f0;
    transition: all 0.2s ease;
  }

  .product-item:hover {
    background-color: #f9f9f9;
  }

  .product-item:last-child {
    border-bottom: none;
  }

  .product-image {
    width: 70px;
    height: 70px;
    object-fit: cover;
    border-radius: 8px;
    margin-right: 15px;
    border: 1px solid #f0f0f0;
  }

  .product-details {
    flex-grow: 1;
  }

  .product-name {
    font-size: 16px;
    font-weight: 500;
    margin-bottom: 3px;
    color: #333;
  }

  .product-category {
    font-size: 13px;
    color: #777;
  }

  .product-price {
    font-size: 16px;
    font-weight: 600;
    color: #007bff;
    white-space: nowrap;
  }

  .order-summary {
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 15px;
  }

  .order-summary-row {
    display: flex;
    justify-content: space-between;
    padding: 10px 0;
    color: #555;
  }

  .total-row {
    font-size: 18px;
    font-weight: 600;
    color: #333;
    padding-top: 15px;
    margin-top: 10px;
    border-top: 2px dashed #e0e0e0;
  }

  .coupon-section {
    background-color: #f0f7ff;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
  }

  .coupon-input {
    height: 45px;
    border: 1px solid #e0e0e0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  .coupon-btn {
    background-color: #ffc107;
    color: #333;
    border: none;
    font-weight: 500;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  .coupon-btn:hover {
    background-color: #e0a800;
    color: #333;
  }

  .payment-method {
    margin-top: 10px;
    padding: 15px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    margin-bottom: 10px;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .payment-method:hover {
    border-color: #ffc107;
    background-color: #fffdf5;
  }

  .payment-method.selected {
    border-color: #ffc107;
    background-color: #fffdf5;
    box-shadow: 0 2px 8px rgba(255, 193, 7, 0.15);
  }

  .payment-method input {
    margin-right: 10px;
    height: 1.5rem;
  }

  .place-order-btn {
    background-color: #ffc107;
    color: #333;
    font-weight: 600;
    padding: 14px 20px;
    border: none;
    border-radius: 8px;
    width: 100%;
    font-size: 18px;
    transition: all 0.3s ease;
    margin-top: 20px;
  }

  .place-order-btn:hover {
    background-color: #e0a800;
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(224, 168, 0, 0.4);
  }

  .applied-coupon {
    background-color: #e8f4ff;
    padding: 12px 15px;
    border-radius: 8px;
    margin-bottom: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-left: 4px solid #007bff;
  }

  .remove-coupon {
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 5px 10px;
    font-size: 12px;
    transition: all 0.2s ease;
  }

  .remove-coupon:hover {
    background-color: #c82333;
  }

  .view-link {
    color: #007bff;
    font-size: 14px;
    text-decoration: none;
    display: inline-block;
    margin-top: 10px;
    transition: all 0.2s ease;
  }

  .view-link:hover {
    color: #0056b3;
    text-decoration: underline;
  }

  .breadcrumb-area {
    padding: 15px 0;
    background-color: #f0f0f0;
    margin-bottom: 30px;
  }

  .breadcrumb-content {
    display: flex;
    flex-direction: column;
  }

  .breadcrumb-content h2 {
    font-size: 24px;
    font-weight: 600;
    margin-bottom: 10px;
    color: #333;
  }

  .breadcrumb-content ol {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 0;
    font-size: 14px;
  }

  .breadcrumb-content li + li:before {
    content: "â€º";
    padding: 0 8px;
    color: #777;
  }

  .breadcrumb-content a {
    color: #555;
    text-decoration: none;
    transition: color 0.3s;
  }

  .breadcrumb-content a:hover {
    color: #000000;
  }

  .wallet-badge {
    background-color: #f0f7ff;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 14px;
    margin-left: 8px;
  }

  .empty-cart {
    text-align: center;
    padding: 40px 0;
  }

  .empty-cart i {
    font-size: 48px;
    color: #ccc;
    margin-bottom: 15px;
  }

  .modal-content {
    border-radius: 10px;
    border: none;
  }

  .modal-header {
    background-color: #f8f9fa;
    border-bottom: 1px solid #f0f0f0;
  }

  .modal-footer {
    background-color: #f8f9fa;
    border-top: 1px solid #f0f0f0;
  }
  #existingAddress {
    padding: 0 10px;
  }
  a {
    text-decoration-line: none;
  }
</style>

<div class="header-bottom header-sticky d-none d-lg-block d-xl-block mb-0">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <!-- Begin Header Bottom Menu Area -->
        <div class="hb-menu">
          <nav>
            <ul>
              <li class="dropdown-holder">
                <a href="/">Home</a>
              </li>
              <li class="megamenu-holder active">
                <a href="/products">Shop</a>
              </li>
              <li><a href="/about">About Us</a></li>
              <li><a href="/contact">Contact</a></li>
            </ul>
          </nav>
        </div>
        <!-- Header Bottom Menu Area End Here -->
      </div>
    </div>
  </div>
</div>

<!-- Begin Breadcrumb Area -->
<div class="breadcrumb-area">
  <div class="container">
    <div class="row">
      <div class="col-12">
        <div class="breadcrumb-content">
          <h2>Checkout</h2>
          <ol>
            <li><a href="/">Home</a></li>
            <li><a href="/cart">Cart</a></li>
            <li>Checkout</li>
          </ol>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- Breadcrumb Area End -->

<div class="container checkout-container">
  <div class="row">
    <div class="col-lg-8">
      <!-- Shipping Address Section -->
      <div class="section-card">
        <h2 class="section-title">
          <i class="fas fa-map-marker-alt"></i>Shipping Address
        </h2>

        <div class="form-group">
          <label for="existingAddress">Select Delivery Address</label>
          <select id="existingAddress" class="form-control address-select">
            <% if (userAddress && userAddress.address.length > 0) { %> <%
            userAddress.address.forEach((address) => { %> <%
            if(address.isDefault){ %>
            <option value="<%= address._id %>">
              <%= address.addressType %> - <%= address.name %>, <%=
              address.streetAddress %>, <%= address.city %>, <%= address.state
              %>, <%= address.country %>, &#10; <%= address.phone %>
            </option>
            <% }; %> <% }); %> <% } else { %>
            <option disabled>No addresses available</option>
            <% } %> <% if (userAddress && userAddress.address.length > 0) { %>
            <% userAddress.address.forEach((address) => { %> <%
            if(!address.isDefault){ %>
            <option value="<%= address._id %>">
              <%= address.addressType %> - <%= address.name %>, <%=
              address.streetAddress %>, <%= address.city %>, <%= address.state
              %>, <%= address.country %>, &#10; <%= address.phone %>
            </option>
            <% }; %> <% }); %> <% } else { %>
            <option disabled>No addresses available</option>
            <% } %>
          </select>
        </div>

        <a onclick="addAddress()" class="btn secondary-btn action-btn mt-3">
          <i class="fas fa-plus-circle mr-2"></i>Add New Address
        </a>
      </div>

      <!-- Order Items Section -->
      <div class="section-card">
        <h2 class="section-title">
          <i class="fas fa-shopping-cart"></i>Order Items
        </h2>

        <!-- Products List -->
        <% if (cartItems && cartItems.length > 0) { %> <% let subtotal = 0; %>
        <% cartItems.forEach(function(item) { %> <% subtotal += item.totalPrice;
        %>
        <div class="product-item">
          <a style="all: unset" href="/products/<%=item.productId._id%>">
            <img
              class="product-image"
              src="uploads/product-images/<%= item.productId.productImage[0] %>"
              alt="<%= item.productId.productName %>"
            />
          </a>
          <div class="product-details">
            <a
              style="all: unset; cursor: pointer"
              href="/products/<%=item.productId._id%>"
            >
              <h5 class="product-name">
                <%= item.productId.productName.split('|')[0].trim() %>
                <span class="text-muted small">x<%= item.quantity %></span>
              </h5>
              <p class="product-category">
                <%= item.productId.category.name %>
              </p>
            </a>
          </div>
          <div class="product-price">â‚¹ <%= item.totalPrice.toFixed(2) %></div>
        </div>
        <% }); %> <% } else { %>
        <div class="empty-cart">
          <i class="fas fa-shopping-cart"></i>
          <p class="lead">Your cart is empty</p>
          <a href="/products" class="btn primary-btn action-btn mt-3"
            >Continue Shopping</a
          >
        </div>
        <% } %>
      </div>

      <!-- Payment Method Section -->
      <div class="section-card">
        <h2 class="section-title">
          <i class="fas fa-credit-card"></i>Payment Method
        </h2>

        <div class="payment-method">
          <label class="d-flex align-items-center m-0">
            <input type="radio" name="payment" value="COD" />
            <div class="ml-2 w-100">
              <span
                ><i class="fas fa-money-bill-wave mr-2"></i>Cash on
                Delivery</span
              >
              <small class="d-block text-muted mt-1"
                >Pay when your order is delivered</small
              >
            </div>
          </label>
        </div>

        <div class="payment-method">
          <label class="d-flex align-items-center m-0">
            <input type="radio" name="payment" value="razorpay" />
            <div class="ml-2 w-100">
              <div class="d-flex align-items-center">
                <span
                  ><i class="fas fa-credit-card mr-2"></i>Online Payment</span
                >
                <small class="d-block text-muted mt-1"
                  >Pay securely with credit/debit card or UPI</small
                >
              </div>
            </div>
          </label>
        </div>

        <div class="payment-method">
          <label class="d-flex align-items-center m-0">
            <input type="radio" name="payment" value="Wallet" />
            <div class="ml-2 w-100">
              <span>
                <i class="fas fa-wallet mr-2"></i>Wallet Payment
                <span class="wallet-badge"
                  >Balance: â‚¹<%= wallet.balance.toFixed(2) %></span
                >
              </span>
              <small class="d-block text-muted mt-1"
                >Use your wallet balance to pay for this order</small
              >
            </div>
          </label>
        </div>
      </div>
    </div>

    <div class="col-lg-4">
      <!-- Coupon Section -->
      <div class="section-card">
        <h2 class="section-title"><i class="fas fa-tag"></i>Promo Code</h2>

        <div id="couponSectionDiv" class="coupon-section">
          <div class="input-group">
            <input
              type="text"
              id="couponCode"
              class="form-control coupon-input"
              placeholder="Enter coupon code"
            />
            <div class="input-group-append">
              <button class="btn coupon-btn" onclick="applyCoupon()">
                Apply
              </button>
            </div>
          </div>
          <p id="couponMessage" class="mt-2 small" style="display: none"></p>
          <a href="/users/mycoupons" class="view-link">
            <i class="fas fa-ticket-alt mr-1"></i>View Available Coupons
          </a>
        </div>

        <div id="appliedCoupon" class="applied-coupon" style="display: none">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <i class="fas fa-check-circle text-success mr-2"></i>
              Applied Coupon:
              <span id="appliedCouponName" class="font-weight-bold"></span>
            </div>
            <button
              class="remove-coupon"
              style="float: right; top: 0"
              onclick="removeCoupon()"
            >
              <i class="fas fa-times"></i> Remove
            </button>
          </div>
        </div>
      </div>

      <!-- Order Summary Section -->
      <div class="section-card">
        <h2 class="section-title">
          <i class="fas fa-file-invoice"></i>Order Summary
        </h2>

        <div class="order-summary">
          <div class="order-summary-row">
            <span>Total</span>
            <span>â‚¹ <span><%= totalRegularPrice.toFixed() %></span></span>
          </div>
          <div class="order-summary-row">
            <span>Subtotal(with Discount)</span>
            <span>â‚¹ <span id="subtotal"><%= subtotal.toFixed(0) %></span></span>
          </div>
          <div class="order-summary-row">
            <span>Coupon Discount</span>
            <span class="text-success"
              >(-) â‚¹ <span id="couponDiscount">0.00</span></span
            >
          </div>
          <div class="order-summary-row">
            <span>Shipping</span>
            <span>â‚¹ 50.00</span>
          </div>
          <div class="text-right">
            <a
              href="#"
              onclick="showShippingCharge(); return false;"
              class="view-link"
            >
              <i class="fas fa-info-circle mr-1"></i>View shipping policy
            </a>
          </div>
          <div class="order-summary-row total-row">
            <span>Total</span>
            <span class="total-price"
              >â‚¹
              <span id="grandTotal"><%= (subtotal+50).toFixed(0) %></span></span
            >
          </div>
        </div>

        <button class="btn place-order-btn">
          <i class="fas fa-check-circle mr-2"></i>Place Order
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Wallet Payment Modal -->
<div
  class="modal fade"
  id="walletPaymentModal"
  tabindex="-1"
  aria-labelledby="walletPaymentModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="walletPaymentModalLabel">
          <i class="fas fa-wallet mr-2"></i>Wallet Payment
        </h5>
        <button
          type="button"
          class="close"
          data-bs-dismiss="modal"
          aria-label="Close"
        >
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <div class="d-flex justify-content-between p-3 bg-light rounded mb-3">
            <h6 class="mb-0">Available Balance:</h6>
            <h6 class="mb-0 text-success">
              â‚¹<span id="walletBalance"><%= wallet.balance.toFixed(2) %></span>
            </h6>
          </div>
          <div class="d-flex justify-content-between p-3 bg-light rounded">
            <h6 class="mb-0">Payable Amount:</h6>
            <h6 class="mb-0 text-primary">â‚¹<span id="payableAmount"></span></h6>
          </div>
        </div>
        <div id="insufficientFunds" style="display: none">
          <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle mr-2"></i>Insufficient funds
            in wallet. Please add money to continue.
          </div>
          <a href="/wallet#add-money-button" class="btn btn-primary btn-block">
            <i class="fas fa-plus-circle mr-2"></i>Add Money
          </a>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
        <button type="button" class="btn btn-primary" id="confirmWalletPayment">
          <i class="fas fa-check mr-2"></i>Pay Now
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Address Modal -->
<div
  class="modal fade"
  id="addressModal"
  tabindex="-1"
  aria-labelledby="addressModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addressModalLabel">Add New Address</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form id="addressForm">
          <input type="hidden" id="addressId" name="addressId" />
          <div class="row">
            <div class="col-md-6 form-group">
              <label for="fullName"
                >Full Name <span class="required">*</span></label
              >
              <input
                type="text"
                id="fullName"
                name="fullName"
                class="form-control"
                required
              />
            </div>
            <div class="col-md-6 form-group">
              <label for="phone"
                >Alternate Phone Number <span class="required">*</span></label
              >
              <div class="input-group">
                <input
                  type="text"
                  id="altPhone"
                  name="altPhone"
                  class="form-control"
                  pattern="[0-9]{10}"
                  title="Please enter Alternate phone number"
                />
              </div>
            </div>
            <div class="col-md-12 form-group">
              <label for="addressLine"
                >Address Line<span class="required">*</span></label
              >
              <input
                type="text"
                id="addressLine"
                name="addressLine"
                class="form-control"
                placeholder="House No., Building Name"
                required
              />
            </div>
            <div class="col-md-12 form-group">
              <label for="LandMark">Landmark</label>
              <input
                type="text"
                id="LandMark"
                name="landMark"
                class="form-control"
                placeholder="Landmark"
              />
            </div>

            <div class="col-md-6 form-group">
              <label for="city">City <span class="required">*</span></label>
              <input
                type="text"
                id="city"
                name="city"
                class="form-control"
                required
              />
            </div>
            <div class="col-md-6 form-group">
              <label for="state">State <span class="required">*</span></label>
              <input
                type="text"
                id="state"
                name="state"
                class="form-control"
                required
              />
            </div>
            <div class="col-md-6 form-group">
              <label for="pincode"
                >Pincode <span class="required">*</span></label
              >
              <input
                type="text"
                id="pincode"
                name="pincode"
                class="form-control"
                pattern="[0-9]{6}"
                title="Please enter a valid 6-digit pincode"
                required
              />
            </div>
            <div class="col-md-6 form-group">
              <label for="country"
                >Country <span class="required">*</span></label
              >
              <select id="country" name="country" class="form-control" required>
                <option value="India">India</option>
                <option value="United States">United States</option>
                <option value="United Kingdom">United Kingdom</option>
                <option value="Canada">Canada</option>
                <option value="Australia">Australia</option>
              </select>
            </div>
            <div class="col-md-6 form-group">
              <label for="addressType"
                >Address Type <span class="required">*</span></label
              >
              <select
                id="addressType"
                name="addressType"
                class="form-control"
                required
              >
                <option value="Home">Home</option>
                <option value="Work">Work</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <div class="col-md-6 form-group">
              <div class="form-check mt-5">
                <input
                  class="form-check-input"
                  type="checkbox"
                  id="isDefault"
                  name="isDefault"
                  style="height: 15px"
                />
                <label class="form-check-label" for="isDefault"
                  >Set as default address</label
                >
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn btn-success" onclick="saveAddress()">
          Save Address
        </button>
      </div>
    </div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
  let appliedCoupon = null;

  function applyCoupon() {
    const couponName = document.getElementById("couponCode").value;

    fetch("/apply-coupon", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ couponName }),
    })
      .then((response) => response.json())
      .then((data) => {
        const messageElement = document.getElementById("couponMessage");
        if (data.success) {
          appliedCoupon = data.coupon;
          updateOrderSummary();
          messageElement.textContent = "Coupon applied successfully!";
          messageElement.style.color = "green";
          document.getElementById("appliedCoupon").style.display = "block";
          document.getElementById("appliedCouponName").textContent =
            data.coupon.name;
          document.getElementById("couponSectionDiv").style.display = "none";
        } else {
          messageElement.textContent = data.message;
          messageElement.style.color = "red";
        }
        messageElement.style.display = "block";
      })
      .catch((error) => {
        console.error("Error:", error);
        Swal.fire(
          "Error",
          "An error occurred while applying the coupon",
          "error"
        );
      });
  }

  async function removeCoupon() {
    await fetch("checkout/coupon", {
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
    });

    appliedCoupon = null;
    updateOrderSummary();
    document.getElementById("appliedCoupon").style.display = "none";
    document.getElementById("couponSectionDiv").style.display = "block";
    document.getElementById("couponMessage").style.display = "none";
    document.getElementById("couponCode").value = "";
  }

  function updateOrderSummary() {
    const subtotalElement = document.getElementById("subtotal");
    const couponDiscountElement = document.getElementById("couponDiscount");
    const grandTotalElement = document.getElementById("grandTotal");

    const subtotal = parseFloat(subtotalElement.textContent);
    let discount = 0;

    if (appliedCoupon) {
      discount = appliedCoupon.offerPrice;
    }

    const grandTotal = subtotal - discount + 50;

    couponDiscountElement.textContent = discount.toFixed(2);
    grandTotalElement.textContent = grandTotal.toFixed(2);
  }

  function checkStockAvailability() {
    return fetch("/checkStock")
      .then((response) => response.json())
      .then((data) => {
        if (!data.success) {
          throw new Error(data.message);
        }
        return data.items;
      });
  }

  async function placeOrder() {
    try {
      const selectedAddress = document.getElementById("existingAddress");
      const paymentMethod = document.querySelector(
        'input[name="payment"]:checked'
      );

      if (!selectedAddress || selectedAddress.value === "Select an address") {
        Swal.fire("Error", "Please select a shipping address", "error");
        return;
      }

      if (!paymentMethod) {
        Swal.fire("Error", "Please select a payment method", "error");
        return;
      }

      // Check stock availability before proceeding
      const stockStatus = await checkStockAvailability();

      if (stockStatus.length === 0) {
        Swal.fire("Error", "Your cart is empty", "error");
        return;
      }

      const blockedProducts = stockStatus.filter((item) => item.isBlocked);
      if (blockedProducts.length > 0) {
        Swal.fire({
          title: "Products Blocked",
          text: "Some Products in your cart have been blocked by admin. Page will reload to update your cart",
          icon: "warning",
          confirmButtonText: "OK",
        }).then(() => {
          window.location.reload();
        });
        return;
      }

      if (stockStatus.some((item) => item.stockChanged)) {
        Swal.fire({
          title: "Stock Changed",
          text: "Some items in your cart have limited Stock",
          icon: "warning",
          confirmButtonText: "Reload",
        }).then(() => {
          window.location.reload();
        });
        return;
      }

      // Check if any items are out of stock
      const outOfStockItems = stockStatus.filter(
        (item) => item.availableQuantity === 0
      );
      if (outOfStockItems.length > 0) {
        const itemNames = outOfStockItems.map((item) => item.name).join(", ");
        Swal.fire(
          "Out of Stock",
          `The following items are out of stock: ${itemNames}`,
          "error"
        );
        return;
      }

      const paymentMethodValue = paymentMethod.value;
      const addressId = selectedAddress.value;

      // Get the grand total
      const grandTotal = parseFloat(
        document.getElementById("grandTotal").textContent
      );

      // Handle wallet payment method
      if (paymentMethodValue === "Wallet") {
        const walletBalance = parseFloat(
          document.getElementById("walletBalance").textContent
        );
        document.getElementById("payableAmount").textContent =
          grandTotal.toFixed(2);

        if (walletBalance < grandTotal) {
          document.getElementById("insufficientFunds").style.display = "block";
          document.getElementById("confirmWalletPayment").style.display =
            "none";
          $("#walletPaymentModal").modal("show");
          return;
        } else {
          document.getElementById("insufficientFunds").style.display = "none";
          document.getElementById("confirmWalletPayment").style.display =
            "block";
          $("#walletPaymentModal").modal("show");
          return;
        }
      }

      // For COD payment
      if (paymentMethodValue === "COD") {
        processOrder(addressId, paymentMethodValue, null);
      }

      // For online payment (Razorpay)
      if (paymentMethodValue === "razorpay") {
        razorpayPayment(addressId, grandTotal);
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire(
        "Error",
        error.message || "An error occurred while placing your order",
        "error"
      );
    }
  }

  // Process the order after payment is confirmed
  function processOrder(addressId, paymentMethod, paymentId) {
    // Prepare order data
    const orderData = {
      addressId: addressId,
      paymentMethod: paymentMethod,
      paymentId: paymentId,
    };

    // Send order data to the server
    fetch("/placeOrder", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(orderData),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          Swal.fire({
            title: "Order Placed Successfully!",
            text: "Your order has been placed successfully.",
            icon: "success",
            confirmButtonText: "View Order",
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = "/ordersuccess";
            } else {
              window.location.href = "/user/orders";
            }
          });
        } else {
          Swal.fire("Error", data.message, "error");
        }
        if (data.info) {
          Swal.fire({
            title: "info",
            text: data.message,
            icon: "info",
          });
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        Swal.fire(
          "Error",
          "An error occurred while processing your order",
          "error"
        );
      });
  }

  // Wallet order
  function processWalletOrder(addressId, paymentMethod, paymentId) {
    // Get the grand total amount
    const amount = parseFloat(
      document.getElementById("grandTotal").textContent
    );

    // Prepare order data
    const orderData = {
      addressId: addressId,
      paymentMethod: paymentMethod,
      paymentId: paymentId,
      couponCode: appliedCoupon ? appliedCoupon._id : null,
      amount: amount,
    };

    // Send order data to the server
    fetch("/checkout/wallet-order", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(orderData),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          Swal.fire({
            title: "Order Placed Successfully!",
            text: "Your order has been placed successfully.",
            icon: "success",
            confirmButtonText: "View Order",
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = "/ordersuccess";
            } else {
              window.location.href = "/user/orders";
            }
          });
        } else {
          Swal.fire("Error", data.message, "error");
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        Swal.fire(
          "Error",
          "An error occurred while processing your order",
          "error"
        );
      });
  }

  // Initialize Razorpay payment with failure handling
  function razorpayPayment(addressId, amount) {
    fetch("/razorpay-order", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ amount: amount }), // in paise
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          const options = {
            key: data.key,
            amount: data.order.amount,
            currency: "INR",
            name: "Zapstore",
            description: "Payment for your order",
            order_id: data.order.id,
            handler: function (response) {
              verifyRazorpayPayment(response, addressId);
            },
            prefill: {
              name: data.user.name,
              email: data.user.email,
              contact: data.user.phone,
            },
            theme: {
              color: "#ffc107",
            },
            // Add modal closing and payment failed handlers
            modal: {
              ondismiss: function () {
                showPaymentFailedModal(
                  "Payment window was closed before completing the payment"
                );
              },
            },
          };

          const rzp = new Razorpay(options);

          // Add payment failed event handler
          rzp.on("payment.failed", function (response) {
            const errorMessage =
              response.error.description ||
              "Payment failed. Please try again or choose a different payment method.";
            showPaymentFailedModal(errorMessage);
          });

          rzp.open();
        } else {
          Swal.fire("Error", data.message, "error");
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        Swal.fire(
          "Error",
          "An error occurred while initializing payment",
          "error"
        );
      });
  }

  // Show payment failed modal with options
  function showPaymentFailedModal(errorMessage) {
    Swal.fire({
      title: "Payment Failed",
      text: errorMessage,
      icon: "error",
      showCancelButton: true,
      confirmButtonText: "Try Again",
      cancelButtonText: "Choose Different Method",
      confirmButtonColor: "#ffc107",
      cancelButtonColor: "#007bff",
    }).then((result) => {
      if (result.isConfirmed) {
        // Try the same payment method again
        const addressId = document.getElementById("existingAddress").value;
        const grandTotal = parseFloat(
          document.getElementById("grandTotal").textContent
        );
        razorpayPayment(addressId, grandTotal);
      } else {
        // Show payment method selection modal
        showPaymentMethodSelectionModal();
      }
    });
  }

  // Function to show payment method selection modal
  function showPaymentMethodSelectionModal() {
    Swal.fire({
      title: "Choose Payment Method",
      html: `
      <div class="payment-methods-container">
        <div class="payment-method-option" onclick="selectPaymentMethod('COD')">
          <i class="fas fa-money-bill-wave mr-2"></i>
          <div>
            <div class="method-title">Cash on Delivery</div>
            <div class="method-description">Pay when your order is delivered</div>
          </div>
        </div>
        <div class="payment-method-option" onclick="selectPaymentMethod('Wallet')">
          <i class="fas fa-wallet mr-2"></i>
          <div>
            <div class="method-title">Wallet Payment</div>
            <div class="method-description">Balance: â‚¹${
              document.getElementById("walletBalance").textContent
            }</div>
          </div>
        </div>
      </div>
    `,
      showConfirmButton: false,
      customClass: {
        container: "payment-method-selection-modal",
      },
      didOpen: () => {
        // Add styles for the payment method options
        const style = document.createElement("style");
        style.textContent = `
        .payment-methods-container {
          display: flex;
          flex-direction: column;
          gap: 15px;
          margin-top: 15px;
        }
        .payment-method-option {
          display: flex;
          align-items: center;
          padding: 15px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          cursor: pointer;
          transition: all 0.3s ease;
        }
        .payment-method-option:hover {
          border-color: #ffc107;
          background-color: #fffdf5;
          transform: translateY(-2px);
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        }
        .method-title {
          font-weight: 500;
          font-size: 16px;
        }
        .method-description {
          font-size: 13px;
          color: #777;
        }
        .payment-method-option i {
          font-size: 24px;
          margin-right: 15px;
          color: #555;
        }
      `;
        document.head.appendChild(style);
      },
    });
  }

  // Function to handle payment method selection from modal
  function selectPaymentMethod(method) {
    // Close the modal
    Swal.close();

    // Update the payment method selection in the UI
    const paymentMethods = document.querySelectorAll(".payment-method");
    paymentMethods.forEach((m) => {
      m.classList.remove("selected");
      if (m.querySelector(`input[value="${method}"]`)) {
        m.classList.add("selected");
        m.querySelector('input[type="radio"]').checked = true;
      }
    });

    // Process the order with the new payment method
    setTimeout(() => {
      placeOrder();
    }, 500);
  }

  // Verify razorpay payment with improved error handling
  function verifyRazorpayPayment(paymentResponse, addressId) {
    const couponCode = appliedCoupon ? appliedCoupon._id : null;

    fetch("/verify-razorpay-payment", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        razorpay_payment_id: paymentResponse.razorpay_payment_id,
        razorpay_order_id: paymentResponse.razorpay_order_id,
        razorpay_signature: paymentResponse.razorpay_signature,
        addressId: addressId,
        couponCode: couponCode,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          Swal.fire({
            title: "Payment Successful!",
            text: "Your order has been placed successfully.",
            icon: "success",
            confirmButtonText: "View Order",
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = "/ordersuccess";
            } else {
              window.location.href = "/user/orders";
            }
          });
        } else {
          // Handle payment verification failure
          showPaymentFailedModal(
            data.message ||
              "Payment verification failed. Please try again or choose a different payment method."
          );
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        showPaymentFailedModal(
          "An error occurred while verifying payment. Please try again or choose a different payment method."
        );
      });
  }

  // Show shipping charge details
  function showShippingCharge() {
    Swal.fire({
      title: "Shipping Policy",
      html: ` <div class="text-center">
            <p>Standard shipping charge of â‚¹50
      <p>Delivery Time:</p>
        <ul class="text-left">
          <li>Metro Cities: 2-3 business days</li>
          <li>Other Cities: 3-5 business days</li>
          <li>Remote Areas: 5-7 business days</li>
         </ul>
            </div> `,
      icon: "info",
    });
  }

  // Add new address
  function addAddress() {
    // Reset form fields
    document.getElementById("addressForm").reset();
    document.getElementById("addressId").value = "";
    document.getElementById("addressModalLabel").textContent =
      "Add New Address";
    $("#addressModal").modal("show");
  }

  // Save address
  function saveAddress() {
    const form = document.getElementById("addressForm");
    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }
    const addressId = document.getElementById("addressId").value;
    const addressData = {
      _id: addressId,
      fullName: document.getElementById("fullName").value,
      altPhone: document.getElementById("altPhone").value,
      addressLine: document.getElementById("addressLine").value,
      landMark: document.getElementById("LandMark").value,
      city: document.getElementById("city").value,
      state: document.getElementById("state").value,
      pincode: document.getElementById("pincode").value,
      country: document.getElementById("country").value,
      type: document.getElementById("addressType").value,
      isDefault: document.getElementById("isDefault").checked,
    };

    fetch("/users/addresses", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(addressData),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          $("#addressModal").modal("hide");
          Swal.fire({
            title: "Success",
            text: addressId
              ? "Address updated successfully!"
              : "Address added successfully!",
            icon: "success",
          }).then(() => {
            window.location.reload();
          });
        } else {
          Swal.fire("Error", data.message, "error");
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        Swal.fire(
          "Error",
          "An error occurred while saving the address",
          "error"
        );
      });
  }

  // Confirm wallet payment
  document
    .getElementById("confirmWalletPayment")
    .addEventListener("click", function () {
      const addressId = document.getElementById("existingAddress").value;
      processWalletOrder(addressId, "Wallet", null);
      $("#walletPaymentModal").modal("hide");
    });

  // Place order button click handler
  document
    .querySelector(".place-order-btn")
    .addEventListener("click", placeOrder);

  // Payment method selection
  const paymentMethods = document.querySelectorAll(".payment-method");
  paymentMethods.forEach((method) => {
    method.addEventListener("click", function () {
      // Remove selected class from all payment methods
      paymentMethods.forEach((m) => m.classList.remove("selected"));
      // Add selected class to clicked method
      this.classList.add("selected");
      // Check the radio button
      this.querySelector('input[type="radio"]').checked = true;
    });
  });

  // Initialize the page
  document.addEventListener("DOMContentLoaded", function () {
    // Update order summary on page load
    updateOrderSummary();

    // Select the first payment method by default
    if (paymentMethods.length > 0) {
      paymentMethods[0].click();
    }
  });
</script>

<%- include('../partials/footer.ejs') %>
