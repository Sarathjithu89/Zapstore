<%- include('../partials/header.ejs') %>
<link
  href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
  rel="stylesheet"
/>
<script>
  const ordersData = "<%- JSON.stringify(orders) %>";
</script>
<style>
  /* Breadcrumb */
  .shop-breadcrumb {
    padding: 20px 0;
    background-color: #f6f6f6;
    margin-bottom: 40px;
  }

  .breadcrumb-content {
    display: flex;
    flex-direction: column;
  }

  .breadcrumb-content h2 {
    font-size: 30px;
    font-weight: 600;
    margin-bottom: 10px;
    color: #333;
  }

  .breadcrumb-content ol {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 0;
    font-size: 14px;
  }

  .breadcrumb-content li + li:before {
    content: "â€º";
    padding: 0 8px;
    color: #777;
  }

  .breadcrumb-content a {
    color: #555;
    text-decoration: none;
    transition: color 0.3s;
  }

  .breadcrumb-content a:hover {
    color: #ff6a00;
  }

  .main {
    padding: 30px 0;
  }

  .sidebar {
    background-color: white;
    padding: 20px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 2px;
  }

  .sidebar h2 {
    font-size: 25px;
  }

  .sidebar a {
    color: #333;
    display: block;
    padding: 10px 0;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .sidebar a.active {
    color: #ffd700;
    font-weight: bold;
  }

  .sidebar a:hover {
    color: #ffd700;
    transform: translateX(5px);
  }

  .sidebar a i,
  .sidebar a svg {
    margin-right: 10px;
  }

  .main-content {
    min-width: 300px;
    max-width: 800px;
    background-color: white;
    padding: 25px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 2px;
  }

  .main-content h2 {
    font-size: 25px;
    color: #333;
    border-bottom: 2px solid #f0f0f0;
    padding-bottom: 10px;
  }

  /* Order specific styles */
  .order-card {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    position: relative;
    transition: all 0.3s ease;
  }

  .order-card:hover {
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .order-header {
    display: flex;
    justify-content: space-between;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
    margin-bottom: 15px;
  }

  .order-id {
    font-weight: 600;
    color: #333;
  }

  .order-date {
    color: #777;
    font-size: 0.9rem;
  }

  .order-status {
    position: absolute;
    top: 15px;
    right: 15px;
    padding: 3px 10px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
  }

  .order-status.Pending {
    background-color: #fff2e6;
    color: #ff6600;
  }

  .order-status.Processing {
    background-color: #e6f7ff;
    color: #0066cc;
  }

  .order-status.Shipped {
    background-color: #e6ffe6;
    color: #009900;
  }

  .order-status.Delivered {
    background-color: #ccffcc;
    color: #006600;
  }

  .order-status.Cancelled {
    background-color: #ffe6e6;
    color: #cc0000;
  }

  .order-status.Return {
    background-color: #f0f0f0;
    color: #666;
  }

  .order-items {
    margin-bottom: 15px;
  }

  .order-item {
    display: flex;
    margin-bottom: 10px;
    padding-bottom: 10px;
    border-bottom: 1px dashed #eee;
  }

  .order-item:last-child {
    border-bottom: none;
  }

  .item-image {
    width: 60px;
    height: 60px;
    border-radius: 4px;
    object-fit: cover;
    margin-right: 10px;
  }

  .item-details {
    flex: 1;
  }

  .item-name {
    font-weight: 500;
    margin-bottom: 5px;
  }

  .item-price {
    color: #555;
    font-size: 0.9rem;
  }

  .item-quantity {
    color: #777;
    font-size: 0.85rem;
  }

  .order-summary {
    background-color: #f9f9f9;
    padding: 10px 15px;
    border-radius: 4px;
    display: flex;
    justify-content: space-between;
  }

  .order-total {
    font-weight: 600;
  }

  .order-actions {
    margin-top: 15px;
    display: flex;
    gap: 10px;
  }

  .accordion-button:not(.collapsed) {
    background-color: #f0f8ff;
    color: #0066cc;
  }

  .no-orders {
    text-align: center;
    padding: 40px 20px;
    color: #777;
  }

  .filter-section {
    margin-bottom: 20px;
    display: flex;
    gap: 10px;
    align-items: center;
  }

  .filter-section select {
    height: 38px;
    border-radius: 4px;
    border: 1px solid #ddd;
    padding: 0 10px;
  }

  @media (max-width: 768px) {
    .order-header {
      flex-direction: column;
      gap: 5px;
    }

    .order-status {
      position: static;
      display: inline-block;
      margin-top: 5px;
    }
  }
</style>

<div class="body-wrapper">
  <!-- Begin Breadcrumb Area -->
  <div class="shop-breadcrumb">
    <div class="container">
      <div class="row">
        <div class="col-12">
          <div class="breadcrumb-content">
            <ol>
              <li><a href="/">Home</a></li>
              <li><a href="/userProfile">My Account</a></li>
              <li>Orders</li>
            </ol>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- Breadcrumb Area End -->

  <div class="container mt-3 mb-5">
    <div class="row justify-content-center">
      <!-- Sidebar -->
      <div class="col-md-3 col-sm-9 sidebar mx-1">
        <h2>My Account</h2>
        <a href="/userProfile">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-person"
            viewBox="0 0 16 16"
          >
            <path
              d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0m4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4m-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10s-3.516.68-4.168 1.332c-.678.678-.83 1.418-.832 1.664z"
            />
          </svg>
          Details
        </a>
        <a href="/address">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-geo-alt"
            viewBox="0 0 16 16"
          >
            <path
              d="M12.166 8.94c-.524 1.062-1.234 2.12-1.96 3.07A32 32 0 0 1 8 14.58a32 32 0 0 1-2.206-2.57c-.726-.95-1.436-2.008-1.96-3.07C3.304 7.867 3 6.862 3 6a5 5 0 0 1 10 0c0 .862-.305 1.867-.834 2.94M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10"
            />
            <path
              d="M8 8a2 2 0 1 1 0-4 2 2 0 0 1 0 4m0 1a3 3 0 1 0 0-6 3 3 0 0 0 0 6"
            />
          </svg>
          Address
        </a>
        <a href="/orders" class="active">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-cart2"
            viewBox="0 0 16 16"
          >
            <path
              d="M0 2.5A.5.5 0 0 1 .5 2H2a.5.5 0 0 1 .485.379L2.89 4H14.5a.5.5 0 0 1 .485.621l-1.5 6A.5.5 0 0 1 13 11H4a.5.5 0 0 1-.485-.379L1.61 3H.5a.5.5 0 0 1-.5-.5M3.14 5l1.25 5h8.22l1.25-5zM5 13a1 1 0 1 0 0 2 1 1 0 0 0 0-2m-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0m9-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2m-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0"
            />
          </svg>
          Orders
        </a>
        <a href="/wishlist">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-heart"
            viewBox="0 0 16 16"
          >
            <path
              d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143q.09.083.176.171a3 3 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15"
            />
          </svg>
          Wishlist
        </a>
        <a href="/wallet">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-wallet-fill"
            viewBox="0 0 16 16"
          >
            <path
              d="M1.5 2A1.5 1.5 0 0 0 0 3.5v2h6a.5.5 0 0 1 .5.5c0 .253.08.644.306.958.207.288.557.542 1.194.542s.987-.254 1.194-.542C9.42 6.644 9.5 6.253 9.5 6a.5.5 0 0 1 .5-.5h6v-2A1.5 1.5 0 0 0 14.5 2z"
            />
            <path
              d="M16 6.5h-5.551a2.7 2.7 0 0 1-.443 1.042C9.613 8.088 8.963 8.5 8 8.5s-1.613-.412-2.006-.958A2.7 2.7 0 0 1 5.551 6.5H0v6A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5z"
            />
          </svg>
          Wallet
        </a>
        <a href="/mycoupons">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-cash"
            viewBox="0 0 16 16"
          >
            <path d="M8 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4" />
            <path
              d="M0 4a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1zm3 0a2 2 0 0 1-2 2v4a2 2 0 0 1 2 2h10a2 2 0 0 1 2-2V6a2 2 0 0 1-2-2z"
            />
          </svg>
          My Coupons
        </a>
        <a href="#" onclick="confirmLogout(event)" class="text-danger mt-4">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-box-arrow-right"
            viewBox="0 0 16 16"
          >
            <path
              fill-rule="evenodd"
              d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0z"
            />
            <path
              fill-rule="evenodd"
              d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708z"
            />
          </svg>
          Logout
        </a>
      </div>

      <!-- Main Content -->
      <div class="col-md-8 col-sm-9 main-content mx-1">
        <h2>Your Orders</h2>

        <div class="filter-section">
          <label for="orderFilter">Filter by:</label>
          <select
            id="orderFilter"
            class="form-select"
            onchange="filterOrders()"
          >
            <option value="all">All Orders</option>
            <option value="Pending">Pending</option>
            <option value="Processing">Processing</option>
            <option value="Shipped">Shipped</option>
            <option value="Delivered">Delivered</option>
            <option value="Cancelled">Cancelled</option>
            <option value="Return">Return</option>
          </select>
        </div>

        <div class="orders-container">
          <% if (orders && orders.length > 0) { %> <% orders.forEach(order => {
          %>
          <div class="order-card" data-status="<%= order.status %>">
            <span class="order-status <%= order.status %>"
              ><%= order.status %></span
            >
            <div class="order-header">
              <div>
                <div class="order-id">Order #<%= order.orderId %></div>
                <div class="order-date">
                  Placed on <%= new
                  Date(order.createdAt).toLocaleDateString('en-US', { year:
                  'numeric', month: 'long', day: 'numeric' }) %>
                </div>
              </div>
            </div>

            <div class="accordion" id="orderAccordion<%= order._id %>">
              <div class="accordion-item border-0">
                <h2 class="accordion-header">
                  <button
                    class="accordion-button collapsed"
                    type="button"
                    data-bs-toggle="collapse"
                    data-bs-target="#collapse<%= order._id %>"
                    aria-expanded="false"
                    aria-controls="collapse<%= order._id %>"
                  >
                    <i class="bi bi-box me-2"></i> View Order Details
                  </button>
                </h2>
                <div
                  id="collapse<%= order._id %>"
                  class="accordion-collapse collapse"
                  data-bs-parent="#orderAccordion<%= order._id %>"
                >
                  <div class="accordion-body p-0 pt-3">
                    <div class="order-items">
                      <% order.orderedItems.forEach(item => { %>
                      <div class="order-item">
                        <% if (item.product.productImage &&
                        item.product.productImage.length > 0) { %>
                        <img
                          src="<%= item.product.productImage[0] %>"
                          alt="<%= item.product.productName %>"
                          class="item-image"
                        />
                        <% } else { %>
                        <div
                          class="item-image bg-light d-flex align-items-center justify-content-center"
                        >
                          <i class="bi bi-image text-muted"></i>
                        </div>
                        <% } %>
                        <div class="item-details">
                          <div class="item-name">
                            <%= item.product.productName %>
                          </div>
                          <div class="item-price">
                            â‚¹<%= item.price.toFixed(2) %>
                          </div>
                          <div class="item-quantity">
                            Qty: <%= item.quantity %>
                          </div>
                        </div>
                      </div>
                      <% }); %>
                    </div>

                    <div class="order-summary">
                      <div>
                        <div>Subtotal: â‚¹<%= order.totalPrice.toFixed(2) %></div>
                        <% if (order.discount > 0) { %>
                        <div>Discount: -â‚¹<%= order.discount.toFixed(2) %></div>
                        <% } %> <% if (order.couponApplied) { %>
                        <div>
                          <small class="text-success">Coupon Applied</small>
                        </div>
                        <% } %>
                      </div>
                      <div class="order-total">
                        Total: â‚¹<%= order.finalAmount.toFixed(2) %>
                      </div>
                    </div>

                    <% if (order.address) { %>
                    <div class="mt-3">
                      <h6>
                        <i class="bi bi-geo-alt me-2"></i>Shipping Address:
                      </h6>
                      <p class="mb-0 ms-4">
                        <%= order.address.fullName %><br />
                        <%= order.address.addressLine %>, <% if
                        (order.address.landMark) { %><%= order.address.landMark
                        %>,<% } %> <%= order.address.city %>, <%=
                        order.address.state %> - <%= order.address.pincode %><br />
                        <%= order.address.country %>
                      </p>
                    </div>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>

            <div class="order-actions">
              <% if (order.status === 'Delivered') { %>
              <button
                class="btn btn-sm btn-outline-primary"
                onclick="requestReturn('<%= order._id %>')"
              >
                <i class="bi bi-arrow-return-left"></i> Request Return
              </button>
              <% } %> <% if (order.status === 'Pending' || order.status ===
              'Processing') { %>
              <button
                class="btn btn-sm btn-outline-danger"
                onclick="cancelOrder('<%= order._id %>')"
              >
                <i class="bi bi-x-circle"></i> Cancel Order
              </button>
              <% } %>

              <button
                class="btn btn-sm btn-outline-secondary"
                onclick="downloadInvoice('<%= order._id %>')"
              >
                <i class="bi bi-file-earmark-text"></i> Download Invoice
              </button>
            </div>
          </div>
          <% }); %> <% } else { %>
          <div class="no-orders">
            <i class="bi bi-bag-dash" style="font-size: 3rem; color: #ddd"></i>
            <h4 class="mt-3">No orders found</h4>
            <p>You haven't placed any orders yet.</p>
            <a href="/" class="btn btn-primary mt-2">
              <i class="bi bi-shop"></i> Start Shopping
            </a>
          </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Cancel Order Confirmation Modal -->
<div
  class="modal fade"
  id="cancelOrderModal"
  tabindex="-1"
  aria-labelledby="cancelOrderModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to cancel this order?</p>
        <form id="cancelOrderForm">
          <input type="hidden" id="cancelOrderId" name="orderId" />
          <div class="mb-3">
            <label for="cancelReason" class="form-label"
              >Reason for Cancellation</label
            >
            <select
              class="form-select"
              id="cancelReason"
              name="reason"
              required
            >
              <option value="">Select a reason</option>
              <option value="Changed my mind">Changed my mind</option>
              <option value="Found better price elsewhere">
                Found better price elsewhere
              </option>
              <option value="Ordered by mistake">Ordered by mistake</option>
              <option value="Shipping time too long">
                Shipping time too long
              </option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div class="mb-3" id="otherReasonDiv" style="display: none">
            <label for="otherReason" class="form-label">Please specify</label>
            <textarea
              class="form-control"
              id="otherReason"
              name="otherReason"
              rows="2"
            ></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
        <button type="button" class="btn btn-danger" id="confirmCancelBtn">
          Cancel Order
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Return Request Modal -->
<div
  class="modal fade"
  id="returnRequestModal"
  tabindex="-1"
  aria-labelledby="returnRequestModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="returnRequestModalLabel">Request Return</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form id="returnRequestForm">
          <input type="hidden" id="returnOrderId" name="orderId" />
          <div class="mb-3">
            <label for="returnReason" class="form-label"
              >Reason for Return</label
            >
            <select
              class="form-select"
              id="returnReason"
              name="reason"
              required
            >
              <option value="">Select a reason</option>
              <option value="Item damaged">Item damaged</option>
              <option value="Wrong item received">Wrong item received</option>
              <option value="Item defective">Item defective</option>
              <option value="Not as described">Not as described</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div class="mb-3" id="returnOtherReasonDiv" style="display: none">
            <label for="returnOtherReason" class="form-label"
              >Please specify</label
            >
            <textarea
              class="form-control"
              id="returnOtherReason"
              name="otherReason"
              rows="2"
            ></textarea>
          </div>
          <div class="mb-3">
            <label for="returnComments" class="form-label"
              >Additional Comments</label
            >
            <textarea
              class="form-control"
              id="returnComments"
              name="comments"
              rows="3"
            ></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
        <button type="button" class="btn btn-primary" id="confirmReturnBtn">
          Submit Request
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Filter orders
  function filterOrders() {
    const filterValue = document.getElementById("orderFilter").value;
    const orderCards = document.querySelectorAll(".order-card");

    orderCards.forEach((card) => {
      if (
        filterValue === "all" ||
        card.getAttribute("data-status") === filterValue
      ) {
        card.style.display = "block";
      } else {
        card.style.display = "none";
      }
    });

    // Show "no orders" message if all are filtered out
    const visibleOrders = document.querySelectorAll(
      '.order-card[style="display: block"]'
    );
    const noOrdersMsg = document.querySelector(".no-orders");

    if (visibleOrders.length === 0 && filterValue !== "all") {
      if (!noOrdersMsg) {
        const ordersContainer = document.querySelector(".orders-container");
        const noOrdersDiv = document.createElement("div");
        noOrdersDiv.className = "no-orders-filtered";
        noOrdersDiv.innerHTML = `
          <p>No ${filterValue} orders found.</p>
          <button onclick="document.getElementById('orderFilter').value='all'; filterOrders();" class="btn btn-outline-secondary btn-sm">
            <i class="bi bi-funnel"></i> Clear Filter
          </button>
        `;
        ordersContainer.appendChild(noOrdersDiv);
      }
    } else {
      const noOrdersFiltered = document.querySelector(".no-orders-filtered");
      if (noOrdersFiltered) {
        noOrdersFiltered.remove();
      }
    }
  }

  // Cancel order
  function cancelOrder(orderId) {
    const cancelOrderModal = new bootstrap.Modal(
      document.getElementById("cancelOrderModal")
    );
    document.getElementById("cancelOrderId").value = orderId;
    cancelOrderModal.show();

    // Reset the form
    document.getElementById("cancelReason").value = "";
    document.getElementById("otherReason").value = "";
    document.getElementById("otherReasonDiv").style.display = "none";
  }

  // Handle "Other" reason selection
  document
    .getElementById("cancelReason")
    .addEventListener("change", function () {
      if (this.value === "Other") {
        document.getElementById("otherReasonDiv").style.display = "block";
      } else {
        document.getElementById("otherReasonDiv").style.display = "none";
      }
    });

  // Confirm cancel order
  document
    .getElementById("confirmCancelBtn")
    .addEventListener("click", function () {
      const form = document.getElementById("cancelOrderForm");
      if (form.checkValidity()) {
        const orderId = document.getElementById("cancelOrderId").value;
        const reason = document.getElementById("cancelReason").value;
        const otherReason = document.getElementById("otherReason").value;

        const cancelData = {
          orderId: orderId,
          reason: reason === "Other" ? otherReason : reason,
        };

        fetch("/cancel-order", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(cancelData),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              const modal = bootstrap.Modal.getInstance(
                document.getElementById("cancelOrderModal")
              );
              modal.hide();

              // Update the order status in the UI
              const orderCard = document.querySelector(
                `.order-card[data-status][data-id="${orderId}"]`
              );
              if (orderCard) {
                orderCard.setAttribute("data-status", "Cancelled");
                const statusBadge = orderCard.querySelector(".order-status");
                if (statusBadge) {
                  statusBadge.className = "order-status Cancelled";
                  statusBadge.textContent = "Cancelled";
                }

                // Remove cancel button
                const cancelBtn = orderCard.querySelector(
                  'button[onclick^="cancelOrder"]'
                );
                if (cancelBtn) {
                  cancelBtn.remove();
                }
              }

              showToast("Order cancelled successfully");
              setTimeout(() => {
                window.location.reload();
              }, 1500);
            } else {
              showToast(
                "Failed to cancel order: " + (data.message || "Unknown error")
              );
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            showToast("An error occurred while cancelling your order");
          });
      } else {
        form.reportValidity();
      }
    });

  // Request return
  function requestReturn(orderId) {
    const returnModal = new bootstrap.Modal(
      document.getElementById("returnRequestModal")
    );
    document.getElementById("returnOrderId").value = orderId;
    returnModal.show();

    // Reset the form
    document.getElementById("returnReason").value = "";
    document.getElementById("returnOtherReason").value = "";
    document.getElementById("returnComments").value = "";
    document.getElementById("returnOtherReasonDiv").style.display = "none";
  }

  // Handle "Other" reason selection for returns
  document
    .getElementById("returnReason")
    .addEventListener("change", function () {
      if (this.value === "Other") {
        document.getElementById("returnOtherReasonDiv").style.display = "block";
      } else {
        document.getElementById("returnOtherReasonDiv").style.display = "none";
      }
    });

  // Confirm return request
  document
    .getElementById("confirmReturnBtn")
    .addEventListener("click", function () {
      const form = document.getElementById("returnRequestForm");
      if (form.checkValidity()) {
        const orderId = document.getElementById("returnOrderId").value;
        const reason = document.getElementById("returnReason").value;
        const otherReason = document.getElementById("returnOtherReason").value;
        const comments = document.getElementById("returnComments").value;

        const returnData = {
          orderId: orderId,
          reason: reason === "Other" ? otherReason : reason,
          comments: comments,
        };

        fetch("/request-return", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(returnData),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              const modal = bootstrap.Modal.getInstance(
                document.getElementById("returnRequestModal")
              );
              modal.hide();

              // Update the order status in the UI
              const orderCard = document.querySelector(
                `.order-card[data-status][data-id="${orderId}"]`
              );
              if (orderCard) {
                orderCard.setAttribute("data-status", "Return");
                const statusBadge = orderCard.querySelector(".order-status");
                if (statusBadge) {
                  statusBadge.className = "order-status Return";
                  statusBadge.textContent = "Return Requested";
                }

                // Remove return button
                const returnBtn = orderCard.querySelector(
                  'button[onclick^="requestReturn"]'
                );
                if (returnBtn) {
                  returnBtn.remove();
                }
              }

              showToast("Return request submitted successfully");
              setTimeout(() => {
                window.location.reload();
              }, 1500);
            } else {
              showToast(
                "Failed to submit return request: " +
                  (data.message || "Unknown error")
              );
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            showToast("An error occurred while submitting your return request");
          });
      } else {
        form.reportValidity();
      }
    });

  // Download invoice
  function downloadInvoice(orderId) {
    window.location.href = `/invoice/${orderId}`;
  }

  // Confirm logout
  function confirmLogout(event) {
    event.preventDefault();
    if (confirm("Are you sure you want to logout?")) {
      window.location.href = "/logout";
    }
  }

  // Show toast notification
  function showToast(message) {
    // Check if the toast container exists, if not create it
    let toastContainer = document.querySelector(".toast-container");
    if (!toastContainer) {
      toastContainer = document.createElement("div");
      toastContainer.className =
        "toast-container position-fixed bottom-0 end-0 p-3";
      document.body.appendChild(toastContainer);
    }

    const toastId = "toast-" + new Date().getTime();
    const toastHTML = `
      <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
          <strong class="me-auto">Notification</strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          ${message}
        </div>
      </div>
    `;

    toastContainer.insertAdjacentHTML("beforeend", toastHTML);
    const toastElement = document.getElementById(toastId);
    const toast = new bootstrap.Toast(toastElement);
    toast.show();

    // Remove toast after it's hidden
    toastElement.addEventListener("hidden.bs.toast", function () {
      toastElement.remove();
    });
  }
</script>

<%- include('../partials/footer.ejs') %>
