<%- include('../partials2/header.ejs') %>

<!-- Bootstrap CSS -->
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css"
/>
<!-- SweetAlert2 CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.min.css">
<style>
  .table-th th {
    text-align: center;
    color: white;
  }
  /* Custom styles for SweetAlert2 */
  .swal2-styled.swal2-confirm {
    background-color: #0d6efd;
  }
  .swal2-popup {
    border-radius: 10px;
  }
</style>

<main id="main">
  <!-- Breadcrumbs-->
  <div class="bg-light border-bottom py-3">
    <div class="container-fluid">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb m-0">
          <li class="breadcrumb-item"><a href="/admin/dashboard">Home</a></li>
          <li class="breadcrumb-item">
            <a href="/admin/orders">Order Management</a>
          </li>
          <li class="breadcrumb-item active" aria-current="page">
            Sales Reports
          </li>
        </ol>
      </nav>
    </div>
  </div>
  <!-- / Breadcrumbs-->

  <div class="container-fluid py-4">
    <!-- Success message alert -->
    <% if (typeof message !== 'undefined' && message) { %>
      <div id="successMessage" data-message="<%= message %>" class="d-none"></div>
    <% } %>
    
    <!-- Stats Overview -->
    <div class="row mb-4">
      <div class="col-md-3 mb-3">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h6 class="card-title text-muted mb-0">Total Orders</h6>
            <h2 class="mt-2 mb-0"><%= totalOrders %></h2>
            <p class="small text-success mt-2 mb-0">
              <i class="bi bi-graph-up"></i>
              <span id="orderGrowth">+12%</span> from previous period
            </p>
          </div>
        </div>
      </div>
      <div class="col-md-3 mb-3">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h6 class="card-title text-muted mb-0">Total Revenue</h6>
            <h2 class="mt-2 mb-0">₹<%= totalRevenue.toLocaleString() %></h2>
            <p class="small text-success mt-2 mb-0">
              <i class="bi bi-graph-up"></i>
              <span id="revenueGrowth">+8%</span> from previous period
            </p>
          </div>
        </div>
      </div>
      <div class="col-md-3 mb-3">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h6 class="card-title text-muted mb-0">Total Discounts</h6>
            <h2 class="mt-2 mb-0">₹<%= totalDiscounts.toLocaleString() %></h2>
            <p class="small text-muted mt-2 mb-0">
              <i class="bi bi-tag"></i> <%= discountPercentage %>% of total
              sales
            </p>
          </div>
        </div>
      </div>
      <div class="col-md-3 mb-3">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h6 class="card-title text-muted mb-0">Average Order Value</h6>
            <h2 class="mt-2 mb-0">
              ₹<%= averageOrderValue.toLocaleString() %>
            </h2>
            <p class="small text-info mt-2 mb-0">
              <i class="bi bi-calculator"></i> Based on completed orders
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- Report Filter Form -->
    <div class="card mb-4 shadow-sm">
      <div class="card-header bg-primary text-white">
        <h5 class="card-title mb-0">Sales Report</h5>
      </div>
      <div class="card-body">
        <form action="/admin/sales-report" method="get" id="reportForm" class="row g-3">
          <div class="col-md-3">
            <label for="reportType" class="form-label">Report Type</label>
            <select id="reportType" name="reportType" class="form-select" onchange="toggleDateFilter()">
              <option value="daily" <%= reportType === 'daily' ? 'selected' : '' %>>Daily</option>
              <option value="weekly" <%= reportType === 'weekly' ? 'selected' : '' %>>Weekly</option>
              <option value="monthly" <%= reportType === 'monthly' ? 'selected' : '' %>>Monthly</option>
              <option value="yearly" <%= reportType === 'yearly' ? 'selected' : '' %>>Yearly</option>
              <option value="custom" <%= reportType === 'custom' ? 'selected' : '' %>>Custom Date Range</option>
            </select>
          </div>
          
          <div class="col-md-3" id="dateInputContainer">
            <label for="singleDate" class="form-label">Date</label>
            <input type="date" id="singleDate" name="singleDate" class="form-control" value="<%= singleDate || new Date().toISOString().split('T')[0] %>">
          </div>
          
          <div class="col-md-3 d-none" id="startDateContainer">
            <label for="startDate" class="form-label">Start Date</label>
            <input type="date" id="startDate" name="startDate" class="form-control" value="<%= startDate || '' %>">
          </div>
          
          <div class="col-md-3 d-none" id="endDateContainer">
            <label for="endDate" class="form-label">End Date</label>
            <input type="date" id="endDate" name="endDate" class="form-control" value="<%= endDate || '' %>">
          </div>
          
          <div class="col-md-3">
            <label for="paymentMethod" class="form-label">Payment Method</label>
            <select id="paymentMethod" name="paymentMethod" class="form-select">
              <option value="all" <%= paymentMethod === 'all' ? 'selected' : '' %>>All</option>
              <option value="Online" <%= paymentMethod === 'Online' ? 'selected' : '' %>>Online</option>
              <option value="COD" <%= paymentMethod === 'COD' ? 'selected' : '' %>>Cash On Delivery</option>
              <option value="Wallet" <%= paymentMethod === 'Wallet' ? 'selected' : '' %>>Wallet</option>
            </select>
          </div>
          
          <div class="col-md-3">
            <label for="orderStatus" class="form-label">Order Status</label>
            <select id="orderStatus" name="orderStatus" class="form-select">
              <option value="all" <%= orderStatus === 'all' ? 'selected' : '' %>>All</option>
              <option value="Delivered" <%= orderStatus === 'Delivered' ? 'selected' : '' %>>Delivered</option>
              <option value="Processing" <%= orderStatus === 'Processing' ? 'selected' : '' %>>Processing</option>
              <option value="Shipped" <%= orderStatus === 'Shipped' ? 'selected' : '' %>>Shipped</option>
              <option value="Pending" <%= orderStatus === 'Pending' ? 'selected' : '' %>>Pending</option>
              <option value="Cancelled" <%= orderStatus === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
              <option value="Returned" <%= orderStatus === 'Returned' ? 'selected' : '' %>>Returned</option>
            </select>
          </div>
          
          <div class="col-12">
            <div class="d-flex gap-2">
              <button type="button" id="generateReportBtn" class="btn btn-primary">
                <i class="bi bi-search"></i> Generate Report
              </button>
              <button type="button" class="btn btn-success" onclick="exportReportWithConfirm('excel')">
                <i class="bi bi-file-earmark-excel"></i> Export Excel
              </button>
              <button type="button" class="btn btn-danger" onclick="exportReportWithConfirm('pdf')">
                <i class="bi bi-file-earmark-pdf"></i> Export PDF
              </button>
              <button type="button" id="clearFiltersBtn" class="btn btn-outline-secondary">
                <i class="bi bi-x-circle"></i> Clear Filters
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- Sales Chart -->
    <div class="card mb-4 shadow-sm">
      <div class="card-header bg-primary text-white">
        <h5 class="card-title mb-0">Sales Trend</h5>
      </div>
      <div class="card-body">
        <canvas id="salesChart" height="100"></canvas>
      </div>
    </div>

    <!-- Sales Data Table -->
    <div class="card shadow-sm">
      <div class="card-header bg-primary text-white">
        <h5 class="card-title mb-0">Sales Details</h5>
      </div>
      <div class="card-body p-0">
        <div class="table-responsive">
          <table class="table table-hover mb-0" id="salesTable">
            <thead class="bg-primary table-th">
              <tr>
                <th scope="col">Date</th>
                <th scope="col">Order ID</th>
                <th scope="col">Customer</th>
                <th scope="col">Payment Method</th>
                <th scope="col">Items</th>
                <th scope="col">Subtotal</th>
                <th scope="col">Discount</th>
                <th scope="col">Final Amount</th>
                <th scope="col">Status</th>
              </tr>
            </thead>
            <tbody>
              <% if(orders && orders.length > 0) { %> <% orders.forEach(order =>
              { %>
              <tr>
                <td><%= new Date(order.createdAt).toLocaleDateString() %></td>
                <td><%= order.orderId %></td>
                <td><%= order.userId.name %></td>
                <td><%= order.paymentMethod %></td>
                <td>
                  <%= order.orderedItems.reduce((sum, item) => sum +
                  item.quantity, 0) %>
                </td>
                <td>₹<%= order.totalPrice.toLocaleString() %></td>
                <td>₹<%= order.discount.toLocaleString() %></td>
                <td>₹<%= order.finalAmount.toLocaleString() %></td>
                <td>
                  <% if(order.status === 'Delivered') { %>
                  <span class="badge bg-success">Delivered</span>
                  <% } else if(order.status === 'Processing') { %>
                  <span class="badge bg-info">Processing</span>
                  <% } else if(order.status === 'Shipped') { %>
                  <span class="badge bg-primary">Shipped</span>
                  <% } else if(order.status === 'Pending') { %>
                  <span class="badge bg-warning text-dark">Pending</span>
                  <% } else if(order.status === 'Cancelled') { %>
                  <span class="badge bg-danger">Cancelled</span>
                  <% } else if(order.status === 'Returned') { %>
                  <span class="badge bg-secondary">Returned</span>
                  <% } %>
                </td>
              </tr>
              <% }); %> <% } else { %>
              <tr>
                <td colspan="9" class="text-center py-5">
                  <i class="bi bi-exclamation-circle fs-1 text-secondary"></i>
                  <p class="mt-3 text-muted">
                    No orders found for selected filters
                  </p>
                </td>
              </tr>
              <% } %>
            </tbody>
            <tfoot>
              <tr class="table-active fw-bold">
                <td colspan="5" class="text-end">Totals:</td>
                <td>₹<%= totalSubtotal.toLocaleString() %></td>
                <td>₹<%= totalDiscounts.toLocaleString() %></td>
                <td>₹<%= totalRevenue.toLocaleString() %></td>
                <td></td>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mt-4">
      <div class="col-md-4 mb-4">
        <div class="card shadow-sm h-100">
          <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">Payment Method Summary</h5>
          </div>
          <div class="card-body">
            <canvas id="paymentMethodChart" height="220"></canvas>
          </div>
        </div>
      </div>
      <div class="col-md-4 mb-4">
        <div class="card shadow-sm h-100">
          <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">Order Status Summary</h5>
          </div>
          <div class="card-body">
            <canvas id="orderStatusChart" height="220"></canvas>
          </div>
        </div>
      </div>
      <div class="col-md-4 mb-4">
        <div class="card shadow-sm h-100">
          <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">Revenue vs Discount</h5>
          </div>
          <div class="card-body">
            <canvas id="revenueDiscountChart" height="220"></canvas>
          </div>
        </div>
      </div>
    </div>

    <!-- Product Analytics Cards -->
    <div class="row mt-4">
      <div class="col-md-4 mb-4">
        <div class="card shadow-sm h-100">
          <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">Top Selling Products</h5>
          </div>
          <div class="card-body p-0">
            <div class="table-responsive">
              <table class="table table-hover mb-0">
                <thead class="bg-primary table-th">
                  <tr>
                    <th>Product</th>
                    <th>Units Sold</th>
                    <th>Revenue</th>
                  </tr>
                </thead>
                <tbody>
                  <% if(topProducts && topProducts.length > 0) { %> <%
                  topProducts.forEach(product => { %>
                  <tr>
                    <td><%= product.name %></td>
                    <td class="text-center"><%= product.quantity %></td>
                    <td class="text-end">
                      ₹<%= product.revenue.toLocaleString() %>
                    </td>
                  </tr>
                  <% }); %> <% } else { %>
                  <tr>
                    <td colspan="3" class="text-center py-3">
                      No data available
                    </td>
                  </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <div class="col-md-4 mb-4">
        <div class="card shadow-sm h-100">
          <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">Top Categories</h5>
          </div>
          <div class="card-body">
            <canvas id="topCategoriesChart" height="220"></canvas>
          </div>
        </div>
      </div>

      <div class="col-md-4 mb-4">
        <div class="card shadow-sm h-100">
          <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">Top Brands</h5>
          </div>
          <div class="card-body">
            <canvas id="topBrandsChart" height="220"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.all.min.js"></script>

<script>
  // SweetAlert2 Toast Configuration
  const Toast = Swal.mixin({
    toast: true,
    position: 'top-end',
    showConfirmButton: false,
    timer: 3000,
    timerProgressBar: true,
    didOpen: (toast) => {
      toast.addEventListener('mouseenter', Swal.stopTimer)
      toast.addEventListener('mouseleave', Swal.resumeTimer)
    }
  });

  function toggleDateFilter() {
    const reportType = document.getElementById('reportType').value;
    const singleDateContainer = document.getElementById('dateInputContainer');
    const startDateContainer = document.getElementById('startDateContainer');
    const endDateContainer = document.getElementById('endDateContainer');

    if (reportType === 'custom') {
      singleDateContainer.classList.add('d-none');
      startDateContainer.classList.remove('d-none');
      endDateContainer.classList.remove('d-none');
    } else {
      singleDateContainer.classList.remove('d-none');
      startDateContainer.classList.add('d-none');
      endDateContainer.classList.add('d-none');
    }
  }

  document.addEventListener('DOMContentLoaded', function () {
    toggleDateFilter();
    initializeCharts();
    showSuccessMessage();

    // Form submission with SweetAlert2
    document.getElementById('generateReportBtn').addEventListener('click', function() {
      // Show loading state
      Swal.fire({
        title: 'Generating Report',
        html: 'Please wait while we process your request...',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      // Submit the form
      document.getElementById('reportForm').submit();
    });

    // Clear filters with confirmation
    document.getElementById('clearFiltersBtn').addEventListener('click', function() {
      Swal.fire({
        title: 'Clear All Filters?',
        text: "This will reset all your selected filters",
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#0d6efd',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, clear all'
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = '/admin/sales-report';
        }
      });
    });
  });

  // Display success message if exists
  function showSuccessMessage() {
    const successMsgElement = document.getElementById('successMessage');
    if (successMsgElement && successMsgElement.dataset.message) {
      Toast.fire({
        icon: 'success',
        title: successMsgElement.dataset.message
      });
    }
  }

  // Chart initialization
  function initializeCharts() {
    const chartData = <%- JSON.stringify(chartData) %>;
    // Sales trend
    const salesCtx = document.getElementById('salesChart').getContext('2d');
    new Chart(salesCtx, {
      type: 'line',
      data: {
        labels: chartData.dates,
        datasets: [{
          label: 'Revenue',
          data: chartData.revenue,
          borderColor: '#0d6efd',
          backgroundColor: 'rgba(13, 110, 253, 0.1)',
          tension: 0.4,
          fill: true
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'top',
          },
          title: {
            display: true,
            text: 'Sales Trend'
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              callback: function(value) {
                return '₹' + value.toLocaleString();
              }
            }
          }
        }
      }
    });

    // Payment method chart
    const paymentCtx = document.getElementById('paymentMethodChart').getContext('2d');
    new Chart(paymentCtx, {
      type: 'pie',
      data: {
        labels: Object.keys(chartData.paymentMethods),
        datasets: [{
          data: Object.values(chartData.paymentMethods),
          backgroundColor: [
            '#0d6efd',
            '#ffc107',
            '#20c997'
          ]
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'bottom',
          }
        }
      }
    });

    // Order status chart
    const statusCtx = document.getElementById('orderStatusChart').getContext('2d');
    new Chart(statusCtx, {
      type: 'doughnut',
      data: {
        labels: Object.keys(chartData.orderStatuses),
        datasets: [{
          data: Object.values(chartData.orderStatuses),
          backgroundColor: [
            '#198754',
            '#0dcaf0',
            '#0d6efd',
            '#ffc107',
            '#dc3545',
            '#6c757d'
          ]
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'bottom',
          }
        }
      }
    });

    // Revenue vs Discount chart
    const revenueDiscountCtx = document.getElementById('revenueDiscountChart').getContext('2d');
    new Chart(revenueDiscountCtx, {
      type: 'bar',
      data: {
        labels: ['Revenue vs Discount'],
        datasets: [
          {
            label: 'Revenue',
            data: [chartData.totalRevenue],
            backgroundColor: '#198754',
          },
          {
            label: 'Discount',
            data: [chartData.totalDiscounts],
            backgroundColor: '#dc3545',
          }
        ]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              callback: function(value) {
                return '₹' + value.toLocaleString();
              }
            }
          }
        },
        plugins: {
          legend: {
            position: 'top',
          }
        }
      }
    });

    //Top category chart
    const categoryCtx = document.getElementById('topCategoriesChart').getContext('2d');
    new Chart(categoryCtx, {
      type: 'pie',
      data: {
        labels: <%- JSON.stringify(topCategories.map(cat => cat.name)) %>,
        datasets: [{
          data: <%- JSON.stringify(topCategories.map(cat => cat.revenue)) %>,
          backgroundColor: [
            '#0d6efd', '#20c997', '#fd7e14', '#6f42c1', '#dc3545',
            '#0dcaf0', '#ffc107', '#6c757d', '#198754', '#d63384'
          ]
        }]
      },
      options:{
        responsive:true,
        plugins:{
          legend:{
            position:'right',
            labels:{
              boxWidth:12
            }
          },
          tooltip:{
            callbacks:{
              label:function(context){
                const label=context.label||'';
                const value=context.raw||0;
                return `${label}: ₹${value.toLocaleString()}`;
              }
            }
          }
        }
      }
    });

    //top brands chart
    const brandCtx = document.getElementById('topBrandsChart').getContext('2d');
    new Chart(brandCtx, {
      type: 'doughnut',
      data: {
        labels: <%- JSON.stringify(topBrands.map(brand => brand.name)) %>,
        datasets: [{
          data: <%- JSON.stringify(topBrands.map(brand => brand.revenue)) %>,
          backgroundColor: [
            '#198754', '#0dcaf0', '#ffc107', '#dc3545', '#6c757d',
            '#0d6efd', '#d63384', '#6f42c1', '#fd7e14', '#20c997'
          ]
        }]
      },
      options:{
        responsive:true,
        plugins:{
          legend:{
            position:'right',
            labels:{
              boxWidth:12
            }
          },
          tooltip:{
            callbacks:{
              label:function(context){
                const label=context.label || '';
                const value=context.raw ||0;
                return `${label}: ₹${value.toLocaleString()}`;
              }
            }
          }
        }
      }
    });
  }

  // Export functions with SweetAlert2 confirmation
  function exportReportWithConfirm(type) {
    const reportType = document.getElementById('reportType').value;
    const formatName = type === 'excel' ? 'Excel' : 'PDF';
    const formatColor = type === 'excel' ? '#198754' : '#dc3545';
    
    Swal.fire({
      title: `Export as ${formatName}?`,
      text: `This will download your sales report in ${formatName} format`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: formatColor,
      cancelButtonColor: '#6c757d',
      confirmButtonText: `Yes, export as ${formatName}`
    }).then((result) => {
      if (result.isConfirmed) {
        // Show loading state
        Swal.fire({
          title: `Generating ${formatName}`,
          html: 'Please wait while we prepare your download...',
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
            setTimeout(() => {
              exportReport(type);
              // Show success toast
              setTimeout(() => {
                Toast.fire({
                  icon: 'success',
                  title: `Sales report successfully exported as ${formatName}`
                });
              }, 1000);
            }, 1500);
          }
        });
      }
    });
  }

  // Original export function
  function exportReport(type) {
    const form = document.getElementById('reportForm');
    const formData = new FormData(form);

    let url = '/admin/export-sales-report?';
    for (const [key, value] of formData.entries()) {
      url += `${key}=${encodeURIComponent(value)}&`;
    }
    url += `format=${type}`;

    window.location.href = url;
  }

  // Handle error cases
  function handleExportError(type) {
    Swal.fire({
      icon: 'error', 
      title: 'Export Failed',
      text: `Unable to export the report as ${type}. Please try again later.`,
      confirmButtonColor: '#0d6efd'
    }).then(() => {
      // Fallback to client-side generation if needed
      if (type === 'pdf') {
        generatePDF();
      } else if (type === 'excel') {
        generateExcel();
      }
    });
  }

  
  function generatePDF() {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    // Add title
    doc.setFontSize(18);
    doc.text("Sales Report", 14, 22);

    // Add date range
    doc.setFontSize(11);
    const reportType = document.getElementById('reportType').value;
    let dateRange = "";

    if (reportType === 'custom') {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      dateRange = `${startDate} to ${endDate}`;
    } else {
      dateRange = document.getElementById('singleDate').value;
    }

    doc.text(`Report Period: ${reportType.toUpperCase()} - ${dateRange}`, 14, 30);

    // Add summary data
    doc.setFontSize(14);
    doc.text("Summary", 14, 40);

    doc.setFontSize(11);
    doc.text(`Total Orders: <%= totalOrders %>`, 14, 50);
    doc.text(`Total Revenue: ₹<%= totalRevenue.toLocaleString() %>`, 14, 58);
    doc.text(`Total Discounts: ₹<%= totalDiscounts.toLocaleString() %>`, 14, 66);
    doc.text(`Average Order Value: ₹<%= averageOrderValue.toLocaleString() %>`, 14, 74);

    // Add table headers
    doc.setFontSize(12);
    doc.text("Order ID", 20, 90);
    doc.text("Date", 60, 90);
    doc.text("Customer", 100, 90);
    doc.text("Status", 140, 90);
    doc.text("Amount", 180, 90);

    // Add line under headers
    doc.line(14, 95, 196, 95);

    // Add table data
    doc.setFontSize(10);
    let yPos = 105;
    <% if(orders && orders.length > 0) { %>
      <% orders.slice(0, 20).forEach((order, index) => { %>
        doc.text("<%= order.orderId %>", 20, yPos);
        doc.text("<%= new Date(order.createdAt).toLocaleDateString() %>", 60, yPos);
        doc.text("<%= order.userId.name %>", 100, yPos);
        doc.text("<%= order.status %>", 140, yPos);
        doc.text("₹<%= order.finalAmount.toLocaleString() %>", 180, yPos);
        yPos += 10;
        
        // Add new page if needed
        if (yPos > 280 && index < <%= orders.length %> - 1) {
          doc.addPage();
          yPos = 20;
          
          // Add headers on new page
          doc.setFontSize(12);
          doc.text("Order ID", 20, yPos);
          doc.text("Date", 60, yPos);
          doc.text("Customer", 100, yPos);
          doc.text("Status", 140, yPos);
          doc.text("Amount", 180, yPos);
          
          // Add line under headers
          doc.line(14, yPos + 5, 196, yPos + 5);
          yPos += 15;
          doc.setFontSize(10);
        }
      <% }); %>
    <% } %>

    // Add footer
    doc.setFontSize(10);
    doc.text("Generated on: " + new Date().toLocaleString(), 14, 285);
    doc.text("Page 1", 180, 285);

    // Save the PDF
    doc.save('sales-report.pdf');
  }

  
  function generateExcel() {
    const wb = XLSX.utils.book_new();
    wb.Props = {
      Title: "Sales Report",
      Subject: "Sales Data",
      Author: "Admin Dashboard",
      CreatedDate: new Date()
    };
    
    const metaData = [
      ["Sales Report"],
      ["Generated on:", new Date().toLocaleString()],
      [""],
      ["Report Summary"],
      ["Total Orders:", <%= totalOrders %>],
      ["Total Revenue:", <%= totalRevenue %>],
      ["Total Discounts:", <%= totalDiscounts %>],
      ["Average Order Value:", <%= averageOrderValue %>],
      [""]
    ];
    
    const metaWS = XLSX.utils.aoa_to_sheet(metaData);
    XLSX.utils.book_append_sheet(wb, metaWS, "Summary");
  
    const ordersData = [
      ["Date", "Order ID", "Customer", "Payment Method", "Items", "Subtotal", "Discount", "Final Amount", "Status"]
    ];
    
    <% if(orders && orders.length > 0) { %>
      <% orders.forEach(order => { %>
        ordersData.push([
          "<%= new Date(order.createdAt).toLocaleDateString() %>",
          "<%= order.orderId %>",
          "<%= order.userId.name %>",
          "<%= order.paymentMethod %>",
          <%= order.orderedItems.reduce((sum, item) => sum + item.quantity, 0) %>,
          <%= order.totalPrice %>,
          <%= order.discount %>,
          <%= order.finalAmount %>,
          "<%= order.status %>"
        ]);
      <% }); %>
    <% } %>
    
 
    ordersData.push([
      "TOTALS", "", "", "", "", 
      <%= totalSubtotal %>, 
      <%= totalDiscounts %>, 
      <%= totalRevenue %>, 
      ""
    ]);
    
    const ordersWS = XLSX.utils.aoa_to_sheet(ordersData);
    XLSX.utils.book_append_sheet(wb, ordersWS, "Orders");
 
    const productsData = [
      ["Product", "Units Sold", "Revenue"]
    ];
    
    <% if(topProducts && topProducts.length > 0) { %>
      <% topProducts.forEach(product => { %>
        productsData.push([
          "<%= product.name %>",
          <%= product.quantity %>,
          <%= product.revenue %>
        ]);
      <% }); %>
    <% } %>
    
    const productsWS = XLSX.utils.aoa_to_sheet(productsData);
    XLSX.utils.book_append_sheet(wb, productsWS, "Top Products");

    XLSX.writeFile(wb, "sales-report.xlsx");
  }

  
</script>

<%- include('../partials2/footer.ejs') %>