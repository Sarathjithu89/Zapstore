<%- include('../partials2/header.ejs') %>
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css"
/>
<style>
  /* Base styles for larger screens */
  .table th,
  .table td {
    padding: 12px;
    font-size: 12.5px;
  }
  .table button {
    padding: 0.5rem;
  }

  /* Medium devices (tablets, 768px and up) */
  @media (max-width: 768px) {
    .table th,
    .table td {
      padding: 10px;
      font-size: 12px;
    }
  }

  /* Small devices (landscape phones, 576px and up) */
  @media (max-width: 576px) {
    .table th,
    .table td {
      padding: 8px;
      font-size: 11.5px;
    }

    /* Stack table headers and data vertically */
    .table thead {
      display: none;
    }

    .table,
    .table tbody,
    .table tr,
    .table td {
      display: block;
      width: 100%;
    }

    .table tr {
      margin-bottom: 15px;
    }

    .table td {
      text-align: right;
      padding-left: 50%;
      position: relative;
    }

    .table td::before {
      content: attr(data-label);
      position: absolute;
      left: 0;
      width: 50%;
      padding-left: 15px;
      font-weight: bold;
      text-align: left;
    }
  }

  /* Error message styling */
  .alert-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1050;
    max-width: 350px;
  }

  .alert-toast {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    border-radius: 8px;
    margin-bottom: 10px;
    animation: fadeInRight 0.5s;
  }

  .description {
  }
  .contentbox {
    width: 100%;
  }
  .mainrow {
    gap: 10px;
  }
  .firstcol {
    width: 100%;
  }

  @keyframes fadeInRight {
    from {
      opacity: 0;
      transform: translateX(50px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
</style>

<main id="main">
  <div class="bg-white border-bottom py-3 mb-1">
    <div
      class="container-fluid d-flex justify-content-between align-items-start align-items-md-center flex-column flex-md-row"
    >
      <nav class="mb-0" aria-label="breadcrumb">
        <ol class="breadcrumb m-0">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item active" aria-current="page">Category</li>
        </ol>
      </nav>
    </div>
  </div>

  <section class="container-fluid p-4">
    <div class="card">
      <div class="card-body">
        <div class="row mainrow">
          <div class="col-md-3 firstcol">
            <form method="post" action="/admin/addcategory" id="categoryForm">
              <div class="mb-4">
                <label for="product_name" class="form-label">Name</label>
                <input
                  type="text"
                  name="name"
                  placeholder="Type here"
                  class="form-control"
                  id="product_name"
                />
                <div id="name-error" class="error-message"></div>
              </div>

              <div class="mb-4">
                <label class="form-label">Description</label>
                <textarea
                  placeholder="Type here"
                  name="description"
                  class="form-control"
                  id="descriptionId"
                ></textarea>
                <div id="description-error" class="error-message"></div>
              </div>

              <div class="d-grid">
                <button class="btn btn-primary" type="submit">
                  Create category
                </button>
              </div>
            </form>
          </div>

          <div class="col-md-8 ml-10 contentbox">
            <div class="table-responsive">
              <table class="table table-hover table-bordered">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Offer</th>
                    <th>Add/remove</th>
                    <th>Status</th>
                    <th>List/unlist</th>
                    <th>Actions</th>
                    <th>Delete</th>
                  </tr>
                </thead>
                <tbody>
                  <% cat.forEach((category) => { %>
                  <tr>
                    <td data-label="Name" class="text-start">
                      <%= category.name %>
                    </td>
                    <td data-label="Description" class="text-start description">
                      <%= category.description %>
                    </td>
                    <td data-label="Offer" class="text-start">
                      <% if(category.categoryOffer) { %> <%=
                      category.categoryOffer %> <% } else { %> 0% <% } %>
                    </td>
                    <td data-label="Add/remove Offer" class="text-start">
                      <% if(category.categoryOffer === 0) { %>
                      <button class="btn btn-info">
                        <a
                          class="text-white"
                          onclick="addOffer('<%= category._id %>')"
                          >Add Offer</a
                        >
                      </button>
                      <% } else { %>
                      <button class="btn btn-danger">
                        <a
                          class="text-white"
                          onclick="removeOffer('<%= category._id %>')"
                          >Remove</a
                        >
                      </button>
                      <% } %>
                    </td>
                    <td data-label="Status" class="text-start">
                      <% if(category.isListed) { %>
                      <span class="badge rounded-pill alert-success"
                        >Listed</span
                      >
                      <% } else { %>
                      <span class="badge rounded-pill alert-danger"
                        >Unlisted</span
                      >
                      <% } %>
                    </td>
                    <td data-label="List/unlist" class="text-start">
                      <% if(category.isListed) { %>
                      <button class="btn btn-danger">
                        <a
                          href="/admin/listCategory?id=<%= category._id %>"
                          class="text-white"
                          >Unlist</a
                        >
                      </button>
                      <% } else { %>
                      <button class="btn btn-success">
                        <a
                          href="/admin/unListCategory?id=<%= category._id %>"
                          class="text-white"
                          >List</a
                        >
                      </button>
                      <% } %>
                    </td>
                    <td data-label="Actions" class="text-start">
                      <button
                        class="btn btn-info"
                        onclick="prepareEditModal('<%= category._id %>', '<%= category.name %>', '<%= category.description %>')"
                        data-bs-toggle="modal"
                        data-bs-target="#editCatogory"
                      >
                        Edit
                      </button>
                    </td>
                    <td data-label="Actions" class="text-start">
                      <button
                        class="btn btn-danger"
                        onclick="deleteCategory('<%= category._id %>')"
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Pagination -->
    <%- include('../partials2/pagination.ejs') %>
  </section>

  <!-- Edit Category Modal -->
  <div
    class="modal fade"
    id="editCatogory"
    tabindex="-1"
    aria-labelledby="editCategoryModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog">
      <div class="modal-content">
        <!-- Modal header -->
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="editCategoryModalLabel">
            Edit Category
          </h1>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"
          ></button>
        </div>

        <!-- Modal body -->
        <div class="modal-body">
          <form
            id="editCategoryForm"
            method="post"
            action="/admin/editCategory"
          >
            <input type="hidden" id="editCategoryId" name="id" value="" />

            <div class="mb-4">
              <label for="categoryName" class="form-label">Name</label>
              <input
                type="text"
                id="categoryName"
                name="categoryName"
                class="form-control"
                required
              />
              <div id="edit-name-error" class="error-message"></div>
            </div>

            <div class="mb-4">
              <label for="description" class="form-label">Description</label>
              <textarea
                id="categoryDescription"
                name="description"
                class="form-control"
                required
              ></textarea>
              <div id="edit-description-error" class="error-message"></div>
            </div>

            <div class="d-grid">
              <button class="btn btn-primary" type="submit" id="updateButton">
                Update Category
              </button>
            </div>
          </form>
        </div>
        <!-- Modal footer -->
        <!-- <div class="modal-footer">
          <button
            type="button"
            class="btn btn-secondary"
            data-bs-dismiss="modal"
          >
            Cancel
          </button>
        </div> -->
      </div>
    </div>
  </div>
  <!-- /Edit Category Modal -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    // Function to prepare the edit modal with category data
    function prepareEditModal(categoryId, categoryName, categoryDescription) {
      document.getElementById("editCategoryId").value = categoryId;
      document.getElementById("categoryName").value = categoryName;
      document.getElementById("categoryDescription").value =
        categoryDescription;

      // Update the form action with the category ID
      document.getElementById(
        "editCategoryForm"
      ).action = `/admin/editCategory?id=${categoryId}`;
    }

    // Add Category Form Validation
    document.addEventListener("DOMContentLoaded", function () {
      document
        .getElementById("categoryForm")
        .addEventListener("submit", function (event) {
          event.preventDefault();
          if (!validateForm()) return;

          const name = document.getElementById("product_name").value.trim();
          const description = document
            .getElementById("descriptionId")
            .value.trim();

          fetch("/admin/addcategory", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ name, description }),
          })
            .then((response) => {
              if (!response.ok) {
                return response.json().then((err) => {
                  throw new Error(err.error);
                });
              }
              return response.json();
            })
            .then((data) => {
              Swal.fire({
                icon: "success",
                title: "Success",
                text: "Category added successfully!",
              }).then(() => location.reload());
            })
            .catch((err) => {
              Swal.fire({
                icon: "error",
                title: "Oops",
                text:
                  err.message === "Category already exists"
                    ? "Category already exists"
                    : "An error occurred while adding the category",
              });
            });
        });

      // Edit Category Form Validation
      document
        .getElementById("editCategoryForm")
        .addEventListener("submit", function (event) {
          if (!validateEditForm()) {
            event.preventDefault();
            return false;
          }

          document.getElementById("updateButton").innerHTML =
            'Updating... <span class="spinner-border spinner-border-sm"></span>';
          document.getElementById("updateButton").disabled = true;
          return true;
        });

      function validateForm() {
        clearErrorMessages();
        let isValid = true;

        const name = document.getElementById("product_name").value.trim();
        const description = document
          .getElementById("descriptionId")
          .value.trim();

        if (name === "") {
          displayErrorMessage("name-error", "Please enter a category name");
          isValid = false;
        } else if (!/^[a-zA-Z\s]+$/.test(name)) {
          displayErrorMessage(
            "name-error",
            "Category name should contain only alphabetic characters"
          );
          isValid = false;
        }

        if (description === "") {
          displayErrorMessage(
            "description-error",
            "Please enter a description"
          );
          isValid = false;
        }

        return isValid;
      }

      function validateEditForm() {
        clearEditErrorMessages();
        let isValid = true;

        const name = document.getElementById("categoryName").value.trim();
        const description = document
          .getElementById("categoryDescription")
          .value.trim();

        if (name === "") {
          displayEditErrorMessage(
            "edit-name-error",
            "Please enter a category name"
          );
          isValid = false;
        } else if (!/^[a-zA-Z\s]+$/.test(name)) {
          displayEditErrorMessage(
            "edit-name-error",
            "Category name should contain only alphabetic characters"
          );
          isValid = false;
        }

        if (description === "") {
          displayEditErrorMessage(
            "edit-description-error",
            "Please enter a description"
          );
          isValid = false;
        }

        return isValid;
      }

      function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.color = "red";
      }

      function displayEditErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.color = "red";
      }

      function clearErrorMessages() {
        document.querySelectorAll(".error-message").forEach((ele) => {
          ele.innerText = "";
        });
      }

      function clearEditErrorMessages() {
        document.querySelectorAll(".error-message").forEach((ele) => {
          ele.innerText = "";
        });
      }
    });

    //add offer function
    async function addOffer(categoryId) {
      const { value: amount } = await Swal.fire({
        title: "Offer in percentage",
        input: "number",
        inputLabel: "Percentage",
        inputPlaceholder: "%",
        inputAttributes: {
          min: 1,
          max: 100,
          step: 1,
        },
      });

      if (!amount || amount <= 0 || amount > 100) {
        return Swal.fire(
          "Invalid Percentage",
          "Enter a valid percentage (1-100)",
          "warning"
        );
      }

      try {
        const response = await fetch("/admin/addCategoryOffer", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ percentage: amount, categoryId }),
        });

        if (!response.ok) {
          throw new Error("Failed to add offer");
        }

        const data = await response.json();

        if (data.success === true) {
          Swal.fire("Offer Added", "The offer has been added", "success").then(
            () => {
              location.reload();
            }
          );
        } else {
          Swal.fire("Failed", data.message || "Adding offer failed", "error");
        }
      } catch (error) {
        Swal.fire(
          "Error",
          error.message || "An error occurred while adding the offer",
          "error"
        );
        console.error("Error Adding Offer:", error);
      }
    }

    async function removeOffer(categoryId) {
      try {
        const response = await fetch("/admin/removeCategoryOffer", {
          method: "POST",
          headers: {
            "content-type": "application/json",
          },
          body: JSON.stringify({
            categoryId: categoryId,
          }),
        });
        const data = await response.json();
        if (response.ok && data.success === true) {
          Swal.fire(
            "Offer Removed",
            "The Offer has been removed",
            "success"
          ).then(() => {
            location.reload();
          });
        } else {
          Swal.fire("Failed", data.message || "Removing offer failed", "error");
        }
      } catch (error) {
        Swal.fire(
          "Error",
          "An Error Occured while Removing the Offer",
          "error"
        );
        console.log("Error Removing Offer", error);
      }
    }
    //error messages
    document.addEventListener("DOMContentLoaded", function () {
      const alerts = document.querySelectorAll(".alert-toast");
      // Auto-dismiss alerts after 5 seconds
      if (alerts.length > 0) {
        setTimeout(function () {
          alerts.forEach(dismissAlert);
        }, 5000);
      }
      // Function to dismiss alert
      function dismissAlert(alert) {
        alert.style.opacity = "0";
        alert.style.transform = "translateX(50px)";
        alert.style.transition = "opacity 0.5s, transform 0.5s";
        setTimeout(() => alert.remove(), 500);
      }
    });
    async function deleteCategory(categoryId) {
      try {
        Swal.fire({
          title: "Are you sure?",
          text: "You will not be able to undo this action!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#d33",
          cancelButtonColor: "#3085d6",
          confirmButtonText: "Yes, delete it!",
        }).then((result) => {
          if (result.isConfirmed) {
            fetch("/admin/delete-category", {
              method: "POST",
              headers: {
                "content-type": "application/json",
              },
              body: JSON.stringify({
                categoryId: categoryId,
              }),
            }).then((data) => {
              if (data.status) {
                Swal.fire(
                  "Deleted",
                  "The category has been deleted",
                  "success"
                ).then(() => {
                  location.reload();
                });
              } else {
                Swal.fire(
                  "Failed",
                  data.message || "Deleting category failed",
                  "error"
                );
              }
            });
          }
        });
      } catch (error) {
        Swal.fire(
          "Error",
          "An Error Occured while Deleting the Category",
          "error"
        );
        console.log("Error Deleting Category", error);
      }
    }
  </script>

  <%- include('../partials/alerts.ejs') %> <%-
  include('../partials2/footer.ejs') %>
</main>
